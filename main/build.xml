<project name="JManage" default="compile" basedir=".">



    <!-- ================== Property Definitions =========================== -->


    <!--

      Each of the following properties are used in the build script.
      Values for these properties are set by the first place they are
      defined, from the following list:

      * Definitions on the "ant" command line (ant -Dfoo=bar compile).

      * Definitions from a "build.properties" file in the top level
        source directory of this application.

      * Definitions from a "build.properties" file in the developer's
        home directory.

      * Default definitions in this build.xml file.

      You will note below that property values can be composed based on the
      contents of previously defined properties.  This is a powerful technique
      that helps you minimize the number of changes required when your development
      environment is modified.  Note that property composition is allowed within
      "build.properties" files as well as in the "build.xml" script.

    -->

    <property file="build.properties"/>
    <!-- <property file="${user.home}/build.properties"/> -->


    <!-- ================= File and Directory Names ======================== -->


    <!--

      These properties generally define file and directory names (or paths) that
      affect where the build process stores its outputs.

      app.version          Version number of this iteration of the application.

      build.home           The directory into which the "prepare" and
                           "compile" targets will generate their output.
                           Defaults to "build".

      catalina.home        The directory in which you have installed
                           a binary distribution of Tomcat 5.  This will
                           be used by the "deploy" target.

      dist.home            The name of the base directory in which
                           distribution files are created.
                           Defaults to "dist".
    -->

    <property name="app.version" value="0.1"/>
    <property name="build.home" value="${basedir}\build"/>
    <property name="dist.home" value="${basedir}/dist"/>
    <property name="docs.home" value="${basedir}/docs"/>
    <property name="src.home" value="${basedir}/src"/>
    <property name="web.home" value="${basedir}/web"/>
    <property name="test.home" value="${basedir}/test"/>

    <!-- =============== Custom Ant Task Definitions ======================= -->



    <!-- ================== Compilation Control Options ==================== -->

    <!--

      These properties control option settings on the Javac compiler when it
      is invoked using the <javac> task.

      compile.debug        Should compilation include the debug option?

      compile.deprecation  Should compilation include the deprecation option?

      compile.optimize     Should compilation include the optimize option?

    -->

    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize" value="true"/>



    <!-- ================= External Dependencies =========================== -->


    <!--

      Use property values to define the locations of external JAR files on which
      your application will depend.  In general, these values will be used for
      two purposes:
      * Inclusion on the classpath that is passed to the Javac compiler
      * Being copied into the "/WEB-INF/lib" directory during execution
        of the "deploy" target.

      Because we will automatically include all of the Java classes that Tomcat 5
      exposes to web applications, we will not need to explicitly list any of those
      dependencies.  You only need to worry about external dependencies for JAR
      files that you are going to include inside your "/WEB-INF/lib" directory.

    -->

    <!-- Dummy external dependency -->
    <!--
      <property name="foo.jar"
               value="/path/to/foo.jar"/>
    -->


    <!-- ================= Classpaths ====================================== -->

    <!--

      Rather than relying on the CLASSPATH environment variable, Ant includes
      features that makes it easy to dynamically construct the classpath you
      need for each compilation.  The example below constructs the compile
      classpath to include the servlet.jar file, as well as the other components
      that Tomcat makes available to web applications automatically, plus anything
      that you explicitly added.

    -->

    <path id="core.compile.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="web.compile.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${basedir}/web/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.home}/classes" />
    </path>

    <path id="test.classpath">
        <pathelement location="${build.home}/classes"/>
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${build.home}/web/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="${build.home}/web/WEB-INF/classes"/>
        <pathelement location="${build.home}/test/classes"/>
    </path>

    <path id="module.weblogic.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.home}/classes" />
        <fileset dir="${basedir}/ext">
            <include name="weblogic.jar"/>
        </fileset>
    </path>

    <path id="module.tomcat.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.home}/classes" />
        <fileset dir="${basedir}/ext">
            <include name="jmx.jar"/>
            <include name="commons-modeler.jar"/>
            <include name="commons-logging-api.jar"/>
        </fileset>
    </path>

    <path id="module.jsr160.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.home}/classes" />
        <fileset dir="${basedir}/ext">
            <include name="jmxri-1_2_1.jar"/>
            <include name="jmxremote-1_0_1.jar"/>
        </fileset>
    </path>

    <path id="module.jboss.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.home}/classes" />
        <fileset dir="${basedir}/ext">
            <include name="jbossall-client.jar"/>
            <include name="jboss-jmx.jar"/>
            <include name="jnet.jar"/>
        </fileset>
    </path>

    <path id="module.websphere.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.home}/classes" />
        <fileset dir="${basedir}/ext">
            <include name="admin.jar"/>
            <include name="wsexception.jar"/>
            <include name="jmxc.jar"/>
            <include name="ras.jar"/>
            <include name="wssec.jar"/>
            <include name="j2ee.jar"/>
            <include name="ffdc.jar"/>
        </fileset>
    </path>

    <!-- ================= All Target ====================================== -->

    <!--

      The "all" target is a shortcut for running the "clean" target followed
      by the "compile" target, to force a complete recompile.

    -->

    <target name="all" depends="clean,compile"
        description="Clean build and dist directories, then compile"/>


    <!-- ================= World Target ====================================== -->

    <!--

      The "world" target is a shortcut for running all targets
    -->

    <target name="world" depends="compile, build-all-modules, build-test-app"
        description="Compiles, builds all modules and builds test app"/>


    <!-- ================= Clean Target ==================================== -->

    <!--

      The "clean" target deletes any previous "build" and "dist" directory,
      so that you can be ensured the application can be built from scratch.

    -->

    <target name="clean"
        description="Delete old build and dist directories">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
    </target>



    <!-- ================= Compile Target ================================== -->

    <!--

      The "compile" target transforms source files (from your "src" directory)
      into object files in the appropriate location in the build directory.
      This example assumes that you will be including your classes in an
      unpacked directory hierarchy under "/WEB-INF/classes".

    -->

    <target name="compile" depends="prepare"
        description="Compile Java sources">

        <!-- Compile core Java classes as necessary -->
        <mkdir dir="${build.home}/classes"/>
        <javac srcdir="${src.home}"
            destdir="${build.home}/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            source="1.4">
            <classpath refid="core.compile.classpath"/>
            <include name="**/webui/Startup.java"/>
            <include name="**/core/**"/>
            <include name="**/cmdui/**"/>
            <exclude name="**/core/modules/**"/>
        </javac>

        <!-- Compile web Java classes as necessary -->
        <mkdir dir="${build.home}/web/WEB-INF/classes"/>
        <javac srcdir="${src.home}"
            destdir="${build.home}/web/WEB-INF/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            source="1.4">
            <classpath refid="web.compile.classpath"/>
            <include name="**/webui/**"/>
            <exclude name="**/webui/Startup.java"/>
        </javac>
    </target>


    <target name="build-test-app"
            description="Builds test JSR160 application">

        <mkdir dir="${build.home}/testapp/classes"/>
        <javac srcdir="${src.home}"
            destdir="${build.home}/testapp/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            source="1.4">
            <classpath refid="module.jsr160.classpath"/>
            <include name="org/jmanage/testapp/**"/>
        </javac>
    </target>


    <!-- target for building all modules -->
    <target name="build-all-modules" description="Builds all modules">
        <antcall target="build-weblogic-module" />
        <antcall target="build-tomcat-module" />
        <antcall target="build-jsr160-module" />
        <antcall target="build-jboss-module" />
        <antcall target="build-websphere-module" />
    </target>

    <!-- target for building weblogic module -->
    <target name="build-weblogic-module"
        description="Builds weblogic module. You will need to copy weblogic.jar to ext folder.">

        <antcall target="build-module">
            <param name="module.name" value="weblogic"/>
        </antcall>
        <copy todir="${build.home}/modules/weblogic">
            <fileset file="${basedir}/ext/weblogic.jar"/>
        </copy>
    </target>

    <!-- target for building tomcat module -->
    <target name="build-tomcat-module" depends="compile"
        description="Builds tomcat module">

        <antcall target="build-module">
            <param name="module.name" value="tomcat"/>
        </antcall>
        <copy todir="${build.home}/modules/tomcat">
            <fileset file="${basedir}/ext/jmx.jar"/>
            <fileset file="${basedir}/ext/commons-modeler.jar"/>
            <fileset file="${basedir}/ext/commons-logging-api.jar"/>
        </copy>
    </target>

    <!-- target for building jsr160 module -->
    <target name="build-jsr160-module" depends="compile"
        description="Builds JSR160 module">
        <antcall target="build-module">
            <param name="module.name" value="jsr160"/>
        </antcall>
        <copy todir="${build.home}/modules/jsr160">
            <fileset file="${basedir}/ext/jmxri-1_2_1.jar"/>
            <fileset file="${basedir}/ext/jmxremote-1_0_1.jar"/>
        </copy>
    </target>

    <!-- target for building jboss module -->
    <target name="build-jboss-module" depends="compile"
        description="Builds jboss module">
        <antcall target="build-module">
            <param name="module.name" value="jboss"/>
        </antcall>
        <copy todir="${build.home}/modules/jboss">
            <fileset file="${basedir}/ext/jbossall-client.jar"/>
            <fileset file="${basedir}/ext/jboss-jmx.jar"/>
            <fileset file="${basedir}/ext/jnet.jar"/>
        </copy>
    </target>

    <!-- target for building websphere module -->
    <target name="build-websphere-module" depends="compile"
        description="Builds WebSphere module">
        <antcall target="build-module">
            <param name="module.name" value="websphere"/>
        </antcall>
        <copy todir="${build.home}/modules/websphere">
            <fileset file="${basedir}/ext/admin.jar"/>
            <fileset file="${basedir}/ext/wsexception.jar"/>
            <fileset file="${basedir}/ext/jmxc.jar"/>
            <fileset file="${basedir}/ext/ras.jar"/>
            <fileset file="${basedir}/ext/wssec.jar"/>
            <fileset file="${basedir}/ext/j2ee.jar"/>
            <fileset file="${basedir}/ext/ffdc.jar"/>
        </copy>
    </target>

    <!-- generic target for building a module -->
    <target name="build-module" depends="compile">
        <mkdir dir="${build.home}/modules/${module.name}/classes" />
        <javac srcdir="${src.home}"
            destdir="${build.home}/modules/${module.name}/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            source="1.4">
            <classpath refid="module.${module.name}.classpath"/>
            <include name="**/core/modules/JMXServerConnection.java"/>
            <include name="**/core/modules/${module.name}/**"/>
        </javac>
        <jar basedir="${build.home}/modules/${module.name}/classes"
            jarfile="${build.home}/modules/${module.name}/classes.jar"/>
        <delete dir="${build.home}/modules/${module.name}/classes" />
    </target>

    <!-- ================= Dist Target ===================================== -->


    <!--

      The "dist" target creates a binary distribution of your application
      in a directory structure ready to be archived in a tar.gz or zip file.
      Note that this target depends on two others:

      * "compile" so that the entire web application (including external
        dependencies) will have been assembled

      add javadoc target in depends, if javadoc needs to be built
    -->

    <target name="dist" depends="compile, build-all-modules"
        description="Create binary distribution">

        <!-- Copy documentation subdirectories -->
        <mkdir dir="${dist.home}/docs"/>
        <copy todir="${dist.home}/docs">
            <fileset dir="${docs.home}"/>
        </copy>
        <!-- Copy config -->
        <copy todir="${dist.home}/config">
            <fileset dir="${build.home}/config"/>
        </copy>
        <!-- Copy lib -->
        <copy todir="${dist.home}/lib">
            <fileset dir="${basedir}/lib"/>
        </copy>
        <!-- Copy classes -->
        <copy todir="${dist.home}/classes">
            <fileset dir="${build.home}/classes"/>
        </copy>
        <!-- copy web -->
        <copy todir="${dist.home}/web">
            <fileset dir="${build.home}/web"/>
        </copy>
        <!-- copy scripts -->
        <copy todir="${dist.home}">
            <fileset file="${basedir}/scripts/*.sh"/>
            <fileset file="${basedir}/scripts/*.cmd"/>
        </copy>
        <!-- copy modules -->
        <copy todir="${dist.home}/modules">
            <fileset dir="${build.home}/modules"/>
        </copy>
        <!-- copy src directory -->
        <copy todir="${dist.home}/src">
            <fileset dir="${basedir}/src"/>
        </copy>

        <!-- jar up the distribution -->

        <delete file="${dist.home}/jmanage-${app.version}.zip"/>
        <jar jarfile="${dist.home}/jmanage-${app.version}.zip">
            <fileset dir="${dist.home}" includes="**"/>
        </jar>

    </target>



    <!-- ================= Javadoc Target ================================== -->

    <!--

      The "javadoc" target creates Javadoc API documentation for the Java
      classes included in your application.  Normally, this is only required
      when preparing a distribution release, but is available as a separate
      target in case the developer wants to create Javadocs independently.

    -->

    <target name="javadoc" depends="compile"
        description="Create Javadoc API documentation">

        <mkdir dir="${dist.home}/docs/api"/>
        <javadoc sourcepath="${src.home}"
            destdir="${dist.home}/docs/api"
            packagenames="*"
            source="1.4">
            <classpath refid="compile.classpath"/>
        </javadoc>

    </target>

    <!-- ================= Prepare Target ================================== -->

    <!--

      The "prepare" target is used to create the "build" destination directory,
      and copy the static contents of your web application to it.  If you need
      to copy static files from external dependencies, you can customize the
      contents of this task.

      Normally, this task is executed indirectly when needed.

    -->

    <target name="prepare">

        <!-- Create build directories as needed -->
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/web"/>
        <mkdir dir="${build.home}/web/WEB-INF"/>
        <mkdir dir="${build.home}/web/WEB-INF/classes"/>
        <mkdir dir="${build.home}/config"/>
        <mkdir dir="${build.home}/logs"/>

        <!-- Copy static content of this web application -->
        <copy todir="${build.home}/web">
            <fileset dir="${web.home}"/>
        </copy>
        <!-- Copy Config files -->
        <copy todir="${build.home}/config">
            <fileset dir="${basedir}/config"/>
        </copy>

        <!-- Copy external dependencies as required -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
        <mkdir dir="${build.home}/web/WEB-INF/lib"/>
        <!--
            <copy todir="${build.home}/WEB-INF/lib" file="${foo.jar}"/>
        -->

        <!-- Copy static files from external dependencies as needed -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

    </target>

    <!-- ================= Test targets ==================================== -->

    <!-- compiles the unit test classes -->
    <target name="compile-tests" depends="compile">

        <!-- Compile Java classes as necessary -->
        <mkdir dir="${build.home}/test/classes"/>
        <javac srcdir="${test.home}"
            destdir="${build.home}/test/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            source="1.4">
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <!-- executes the unit tests -->
    <target name="test" depends="compile-tests" description="Executes unit tests">
        <mkdir dir="${build.home}/test/report/xml"/>
        <junit failureproperty="unittest.failed" fork="yes">
            <sysproperty key="odt.root" value="${build.home}"/>
            <formatter type="xml"/>
            <batchtest todir="${build.home}/test/report/xml">
                <fileset dir="${build.home}/test/classes">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
            <classpath refid="test.classpath"/>
            <!--<assertions>
              <enable/>
            </assertions> -->
        </junit>
        <antcall target="test-report-conditional"/>
        <fail if="unittest.failed" message="Unit tests failed."/>
        <echo message="All unit tests passed. Run test-report target to view the report."/>
    </target>

    <target name="test-report-conditional" if="unittest.failed">
        <antcall target="test-report"/>
    </target>

    <target name="test-report" description="Generates unit test report">
        <!-- generate junit report-->
        <junitreport>
            <fileset dir="${build.home}/test/report/xml">
                <include name="TEST*.xml"/>
            </fileset>
            <report format="frames" todir="${build.home}/test/report/html"/>
        </junitreport>
        <!-- launch the test report -->
        <exec dir="."
            executable="explorer.exe"
            os="Windows 2000">
            <arg line="${build.home}\test\report\html\index.html"/>
        </exec>
    </target>

</project>

